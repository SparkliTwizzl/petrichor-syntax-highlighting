%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Petrichor Script
file_extensions: [petrichor, ptcr]
scope: source.petrichor
version: 2
language_version: 1.0.0

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: keywords
    - include: numbers
    - include: operators
    - include: punctuation
    - include: strings
    - include: variables

  operators:
    - match: '(?<!\\)[\{\}:]'
      scope: keyword.operator.petrichor
    - match: '(?<![\\>])>>(?!>)'
      scope: keyword.operator.petrichor

  keywords:
    - match: '^\s*(metadata|module\-options)(?=\s*:)'
      scope: 'entity.name.type.global.petrichor'
    - match: '^\s*(minimum\-version|command|module\-options|auto\-exit|log\-file|log\-mode|input\-file|output\-file)(?=\s*:)'
      scope: 'entity.name.tag.global.petrichor'
    - match: '^\s*(entry\-list|shortcut\-list)(?=\s*:)'
      scope: 'entity.name.type.shortcutscripts.petrichor'
    - match: '^\s*(default\-icon|suspend\-icon|reload\-shortcut|suspend\-shortcut|shortcut\-template|shortcut|entry|id|name|last\-name|pronoun|color|decoration|find|replace|text\-case)(?=\s*:)'
      scope: 'entity.name.tag.shortcutscripts.petrichor'
    - match: '^\s*(allowed\-characters|string\-count|string\-length)(?=\s*:)'
      scope: 'entity.name.tag.randomstrings.petrichor'

  variables:
    - match: '\[[a-z-]+(?:-[a-z0-9]+)*(?:-[a-z]+)?\]'
      scope: variable.parameter.petrichor

  numbers:
    - match: '\b-?\d+(\.\d+)?(?<=\d)\b'
      scope: constant.numeric.petrichor

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape character.
    - match: '(?<!\\)"'
      scope: punctuation.definition.string.begin.petrichor
      push: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.petrichor
    - match: '\.'
      scope: constant.character.escape.petrichor
    - match: '"'
      scope: punctuation.definition.string.end.petrichor
      pop: true

  comments:
    # Comments begin with a '//' and finish at the end of the line.
    - match: '(?<!\\)//'
      scope: punctuation.definition.comment.petrichor
      push: inside_comment

  inside_comment:
    - meta_include_prototype: false
    - meta_scope: comment.line.double-slash.petrichor
    - match: $\n?
      pop: true

